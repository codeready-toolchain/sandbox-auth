// Code generated by goa v3.10.2, DO NOT EDIT.
//
// login endpoints
//
// Command:
// $ goa gen github.com/codeready-toolchain/sandbox-auth/design

package login

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "login" service endpoints.
type Endpoints struct {
	Login    goa.Endpoint
	Callback goa.Endpoint
}

// NewEndpoints wraps the methods of the "login" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Login:    NewLoginEndpoint(s),
		Callback: NewCallbackEndpoint(s),
	}
}

// Use applies the given middleware to all the "login" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Login = m(e.Login)
	e.Callback = m(e.Callback)
}

// NewLoginEndpoint returns an endpoint function that calls the method "login"
// of service "login".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*LoginCriteria)
		return s.Login(ctx, p)
	}
}

// NewCallbackEndpoint returns an endpoint function that calls the method
// "callback" of service "login".
func NewCallbackEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*LoginCallbackCriteria)
		return s.Callback(ctx, p)
	}
}

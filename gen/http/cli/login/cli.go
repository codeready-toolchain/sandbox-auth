// Code generated by goa v3.10.2, DO NOT EDIT.
//
// login HTTP client CLI support package
//
// Command:
// $ goa gen github.com/codeready-toolchain/sandbox-auth/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	loginc "github.com/codeready-toolchain/sandbox-auth/gen/http/login/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `login (login|callback)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` login login --redirect "Id aspernatur ea consequatur a eveniet consequuntur." --api-client "Quis provident sunt modi tempora." --referer "Qui soluta ut qui perferendis."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		loginFlags = flag.NewFlagSet("login", flag.ContinueOnError)

		loginLoginFlags         = flag.NewFlagSet("login", flag.ExitOnError)
		loginLoginRedirectFlag  = loginLoginFlags.String("redirect", "", "")
		loginLoginAPIClientFlag = loginLoginFlags.String("api-client", "", "")
		loginLoginRefererFlag   = loginLoginFlags.String("referer", "", "")

		loginCallbackFlags     = flag.NewFlagSet("callback", flag.ExitOnError)
		loginCallbackCodeFlag  = loginCallbackFlags.String("code", "", "")
		loginCallbackStateFlag = loginCallbackFlags.String("state", "", "")
	)
	loginFlags.Usage = loginUsage
	loginLoginFlags.Usage = loginLoginUsage
	loginCallbackFlags.Usage = loginCallbackUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "login":
			svcf = loginFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "login":
			switch epn {
			case "login":
				epf = loginLoginFlags

			case "callback":
				epf = loginCallbackFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "login":
			c := loginc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "login":
				endpoint = c.Login()
				data, err = loginc.BuildLoginPayload(*loginLoginRedirectFlag, *loginLoginAPIClientFlag, *loginLoginRefererFlag)
			case "callback":
				endpoint = c.Callback()
				data, err = loginc.BuildCallbackPayload(*loginCallbackCodeFlag, *loginCallbackStateFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// loginUsage displays the usage of the login command and its subcommands.
func loginUsage() {
	fmt.Fprintf(os.Stderr, `Login Service
Usage:
    %[1]s [globalflags] login COMMAND [flags]

COMMAND:
    login: Login endpoint sets up the user for authentication and redirects them to the identity provider
    callback: Callback endpoint that receives authorization code from identity provider

Additional help:
    %[1]s login COMMAND --help
`, os.Args[0])
}
func loginLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] login login -redirect STRING -api-client STRING -referer STRING

Login endpoint sets up the user for authentication and redirects them to the identity provider
    -redirect STRING: 
    -api-client STRING: 
    -referer STRING: 

Example:
    %[1]s login login --redirect "Id aspernatur ea consequatur a eveniet consequuntur." --api-client "Quis provident sunt modi tempora." --referer "Qui soluta ut qui perferendis."
`, os.Args[0])
}

func loginCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] login callback -code STRING -state STRING

Callback endpoint that receives authorization code from identity provider
    -code STRING: 
    -state STRING: 

Example:
    %[1]s login callback --code "Neque ut." --state "Accusantium ipsam nisi pariatur magnam."
`, os.Args[0])
}
